@page
@model Ceng382_week5.Pages.IndexModel
@{
    ViewData["Title"] = "Class Information System";
}
@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    <style>
        body {
            background-color: #fff0f5;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .form-container, .table-container {
            background-color: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            margin-bottom: 20px;
        }
        h2 {
            color: #d63384;
            margin-bottom: 25px;
        }
        .btn-primary {
            background-color: #ff69b4;
            border-color: #ff69b4;
        }
        .btn-warning {
            background-color: #ff85a2;
            border-color: #ff85a2;
        }
        .form-control:focus {
            border-color: #ff69b4;
            box-shadow: 0 0 0 0.25rem rgba(255, 105, 180, 0.25);
        }
        .pagination {
            overflow-x: auto;
            white-space: nowrap;
            flex-wrap: wrap; 
        }
        .page-item {
            display: inline-block; 
        }
        .page-link {
            min-width: 40px;
            text-align: center;
        }
        .column-selected {
            background-color: #e0f7fa !important;
        }
        .table th {
            cursor: pointer;
        }
        .btn-export {
            margin-right: 10px;
            margin-bottom: 10px;
        }
        @@media (max-width: 768px) {
            .pagination {
                justify-content: center;
            }
        }
    </style>
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="form-container">
                <h2>@(Model.EditId == 0 ? "Add Class" : "Edit Class")</h2>
                <form method="post" id="classForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="EditId" id="EditId" />
                    
                    <div class="form-group mb-3">
                        <label asp-for="NewClass.ClassName" class="form-label">Class Name</label>
                        <input asp-for="NewClass.ClassName" class="form-control"  id="NewClass_ClassName" />
                        <span asp-validation-for="NewClass.ClassName" class="text-danger"></span>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label asp-for="NewClass.StudentCount" class="form-label">Student Count</label>
                        <input asp-for="NewClass.StudentCount" class="form-control" id="NewClass_StudentCount" />
                        <span asp-validation-for="NewClass.StudentCount" class="text-danger"></span>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label asp-for="NewClass.Description" class="form-label">Description</label>
                        <textarea asp-for="NewClass.Description" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="NewClass.Description" class="text-danger"></span>
                    </div>
                    
                    <div class="form-group">
                       
                            <button type="button" class="btn btn-primary" onclick="submitForm('Add')">
                                <i class="bi bi-plus-circle"></i> Add Class
                            </button>
                       
                            <button type="button" class="btn btn-warning" onclick="submitForm('Edit')">
                                <i class="bi bi-pencil-square"></i> Update
                            </button>
                            <a asp-page="./Index" class="btn btn-secondary">
                                <i class="bi bi-x-circle"></i> Cancel
                            </a>
                        
                    </div>
                </form>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="table-container">
                <h2>Class List</h2>

                <form method="get" class="mb-4">
                    <div class="row g-3">
                        <div class="col-md-5">
                            <input type="text" name="ClassNameFilter" value="@Model.ClassNameFilter"
                                   class="form-control"
                                   placeholder="Class name..."
                                   id="classNameInput" />
                        </div>
                        <div class="col-md-5">
                            <input type="number" name="MinStudentCount" value="@Model.MinStudentCount"
                                   class="form-control"
                                   placeholder="Min students"
                                   id="studentCountInput" />
                        </div>
                        <div class="col-md-2">
                            <button type="submit" class="btn btn-primary w-100">Filter</button>
                        </div>
                    </div>
                </form>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <button id="exportAllBtn" class="btn btn-success">
                            <i class="bi bi-file-earmark-arrow-down"></i> Export All (JSON)
                        </button>
                        <button id="exportFilteredBtn" class="btn btn-info ms-2">
                            <i class="bi bi-filter-square"></i> Export Filtered (JSON)
                        </button>
                    </div>
                    <div class="col-md-6 text-end">
                        <div class="form-check form-check-inline">
                            <input class="form-check-input column-checkbox" type="checkbox" value="ClassName" checked>
                            <label class="form-check-label">Class Name</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input column-checkbox" type="checkbox" value="StudentCount" checked>
                            <label class="form-check-label">Student Count</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input column-checkbox" type="checkbox" value="Description" checked>
                            <label class="form-check-label">Description</label>
                        </div>
                    </div>
                </div>

                @if (Model.PaginatedClasses.Any())
                {
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                              
                                <th>ID</th>
                                <th>Class Name</th>
                                <th>Students</th>
                                <th>Description</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.PaginatedClasses)
                            {
                                <tr>
                                     
                                    <td>@item.Id</td>
                                    <td>@item.ClassName</td>
                                    <td>@item.StudentCount</td>
                                    <td>@item.Description</td>
                                    <td>
                                       <button onclick="editClass(@item.Id)" class="btn btn-sm btn-info me-2">
                                            <i class="bi bi-pencil"></i>
                                        </button>

                                        <form method="post" class="d-inline">
                                            <input type="hidden" name="id" value="@item.Id" />
                                            <button type="submit" asp-page-handler="Delete" class="btn btn-sm btn-danger">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <nav aria-label="Page navigation">
                        <ul class="pagination flex-wrap">
                            <li class="page-item @(!Model.PaginatedClasses.HasPreviousPage ? "disabled" : "")">
                                <a class="page-link" 
                                asp-route-pageIndex="@(Model.PaginatedClasses.PageIndex - 1)">
                                    &laquo; Previous
                                </a>
                            </li>
                            
                            @{
                                int startPage = Math.Max(1, Model.PaginatedClasses.PageIndex - 2);
                                int endPage = Math.Min(Model.PaginatedClasses.TotalPages, startPage + 4);
                                
                                // Eğer başta çok boşluk varsa startPage'i ayarla
                                if (endPage - startPage < 4 && startPage > 1)
                                {
                                    startPage = Math.Max(1, endPage - 4);
                                }
                            }
                            
                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.PaginatedClasses.PageIndex ? "active" : "")">
                                    <a class="page-link" asp-route-pageIndex="@i">@i</a>
                                </li>
                            }
                            
                            <li class="page-item @(!Model.PaginatedClasses.HasNextPage ? "disabled" : "")">
                                <a class="page-link" 
                                asp-route-pageIndex="@(Model.PaginatedClasses.PageIndex + 1)">
                                Next &raquo;
                                </a>
                            </li>
                        </ul>
                    </nav>
                }
                else
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> No classes found matching your criteria.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@* I got some helps from AI for this part *@
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            // Kolon checkbox işlemleri
            document.querySelectorAll('.column-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    const columnName = this.value;
                    const columnIndex = getColumnIndex(columnName);
                    document.querySelectorAll(`th:nth-child(${columnIndex}), td:nth-child(${columnIndex})`)
                        .forEach(el => el.classList.toggle('column-selected', this.checked));
                });
            });
 
            document.getElementById('exportAllBtn').addEventListener('click', function () {
                exportData(false);
            });

            document.getElementById('exportFilteredBtn').addEventListener('click', function () {
                exportData(true);
            });
        });

 
        function getColumnIndex(columnName) {
            const columns = ['ClassName', 'StudentCount', 'Description'];
            return columns.indexOf(columnName) + 2; // +2 çünkü ID 1. kolonda
        }
 
        function submitForm(handlerName) {
            const form = document.getElementById("classForm");
            const className = document.getElementById('NewClass_ClassName').value;
            const studentCount = document.getElementById('NewClass_StudentCount').value;
            const description = document.querySelector('textarea[name="NewClass.Description"]').value;
        
            if (className || studentCount || description) {
                const url = new URL(window.location.href);
                const baseUrl = url.pathname;

                form.action = `${baseUrl}?handler=${handlerName}`;
                form.submit();
                
                
                location.reload(); 
            } else {
                alert('Hiçbir değişiklik yapılmadı.');
            }
        }

 
        async function exportData(filtered) {
            try {
                const selectedColumns = [];
                document.querySelectorAll('.column-checkbox:checked').forEach(checkbox => {
                    selectedColumns.push(checkbox.value);
                });

                const params = { selectedColumns: selectedColumns };

                if (filtered) {
                    params.classNameFilter = document.getElementById('classNameInput').value;
                    params.minStudentCount = document.getElementById('studentCountInput').value;
                }

                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                const response = await fetch(`/Index?handler=${filtered ? 'ExportFiltered' : 'ExportAll'}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(params)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const blob = await response.blob();
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `classes_${filtered ? 'filtered' : 'all'}_${new Date().toISOString().slice(0, 10)}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            } catch (error) {
                console.error('Export hatası:', error);
                alert('Export işlemi başarısız: ' + error.message);
            }
        }

    
        function editClass(id) {
            console.log("Edit butonuna tıklandı, ID:", id);

            fetch(`?handler=EditClass&id=${id}`, {
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => response.json())
                .then(data => {
                    console.log("Gelen veri:", data);
                    document.getElementById('EditId').value = data.id;
                    document.getElementById('NewClass_ClassName').value = data.className;
                    document.getElementById('NewClass_StudentCount').value = data.studentCount;
                    document.querySelector('textarea[name="NewClass.Description"]').value = data.description;
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                })
                .catch(error => console.error('Hata:', error));
        }
    </script>
}